# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type State implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  initials: String!
  code: Float!
  cities: [City!]!
}

interface Node {
  """An random string generated by shortid package"""
  id: ID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type City implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  code: Float!
  state: State!
  addresses: [Address!]!
}

type Address implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  zip: String!
  address: String!
  number: String!
  condominium: Condominium!
  city: City!
}

type Local implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String
  capacity: Float!
  image: String
  block: Block
  condominium: Condominium!
}

type Phone implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  ddd: String!
  number: String!
  person: Person!
}

type User implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  login: String!
  person: Person!
}

type Person implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  lastName: String!
  email: String!
  gender: Gender!
  cpf: String!
  color: String!
  birthdate: DateTime!
  phones: [Phone!]!
  user: User!
  condominiums: [Condominium!]!
}

enum Gender {
  M
  F
  N
}

type Rule implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  condominium: Condominium!
}

type Condominium implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  companyName: String!
  cnpj: String!
  character: String!
  blocks: [Block!]!
  rules: [Rule!]!
  locals: [Local!]!
  address: Address!
  people: [Person!]!
}

type Image implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  aspectRatio: Float!
  ext: String!
  width: Float!
  height: Float!
  size: Float!
  block: Block
}

type Block implements Node {
  """An random string generated by shortid package"""
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  number: Float!
  images: [Image!]
  condominium: Condominium!
  locals: [Local!]
}

type Query {
  showUsers(
    sort: UserSortInput

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): UserConnection!
  findUserByID(id: ID!): User!
  findUserByLogin(login: String!): User!
  showPeople(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): PersonConnection!
  findPersonByID(id: ID!): Person!
  profile: User!
  showCondominiums(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): CondominiumConnection!
  findCondominiumByID(id: ID!): Condominium!
  currentCondominium: Condominium!
  showStates(
    sort: StateSortInput

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): StateConnection!
  findStateByID(id: ID!): State!
  showCities(
    sort: CitySortInput

    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): CityConnection!
  findCityByID(id: ID!): City!
  findCitiesByStateID(id: ID!): [City!]!
  showBlocks(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): BlockConnection!
  findBlockByID(id: ID!): Block!
  showImages(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): ImageConnection!
  showLocals(
    """Paginate before opaque cursor"""
    before: String

    """Paginate after opaque cursor"""
    after: String

    """Paginate first"""
    first: Int

    """Paginate last"""
    last: Int
  ): LocalConnection!
  findLocalByID(id: ID!): Local!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: UserPageInfo
  totalCount: Int!
}

type UserEdge {
  cursor: String
  node: User
}

type UserPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input UserSortInput {
  login: Order
}

enum Order {
  ASC
  ASC_NULLS_LAST
  ASC_NULLS_FIRST
  DESC
  DESC_NULLS_LAST
  DESC_NULLS_FIRST
}

type PersonConnection {
  edges: [PersonEdge!]
  pageInfo: PersonPageInfo
  totalCount: Int!
}

type PersonEdge {
  cursor: String
  node: Person
}

type PersonPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type CondominiumConnection {
  edges: [CondominiumEdge!]
  pageInfo: CondominiumPageInfo
  totalCount: Int!
}

type CondominiumEdge {
  cursor: String
  node: Condominium
}

type CondominiumPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type StateConnection {
  edges: [StateEdge!]
  pageInfo: StatePageInfo
  totalCount: Int!
}

type StateEdge {
  cursor: String
  node: State
}

type StatePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

input StateSortInput {
  name: Order
  initials: Order
  cities: CitySortInput
}

input CitySortInput {
  name: Order
}

type CityConnection {
  edges: [CityEdge!]
  pageInfo: CityPageInfo
  totalCount: Int!
}

type CityEdge {
  cursor: String
  node: City
}

type CityPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type BlockConnection {
  edges: [BlockEdge!]
  pageInfo: BlockPageInfo
  totalCount: Int!
}

type BlockEdge {
  cursor: String
  node: Block
}

type BlockPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type ImageConnection {
  edges: [ImageEdge!]
  pageInfo: ImagePageInfo
  totalCount: Int!
}

type ImageEdge {
  cursor: String
  node: Image
}

type ImagePageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type LocalConnection {
  edges: [LocalEdge!]
  pageInfo: LocalPageInfo
  totalCount: Int!
}

type LocalEdge {
  cursor: String
  node: Local
}

type LocalPageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Mutation {
  updateUser(input: UserUpdateInput!): User!
  login(input: AuthenticationInput!): User!
  register(input: UserInsertInput!): User!
  forgot(input: ForgotInput!): String!
  changePassword(input: ChangePasswordInput!): User!
  evictRefreshCookie: Boolean!
  updateCondominium(input: CondominiumUpdateInput!): Condominium!
  createBlock(input: BlockInsertInput!): Block!
  updateBlock(id: ID!, input: BlockUpdateInput!): Block!
  deleteBlock(id: ID!): Block!
}

input UserUpdateInput {
  login: String
  person: PersonUpdateInput
}

input PersonUpdateInput {
  name: String
  lastName: String
  email: String
  cpf: String
  birthdate: DateTime
  gender: Gender
  phones: [PhoneUpdateInput!]
}

input PhoneUpdateInput {
  ddd: String
  number: String
}

input AuthenticationInput {
  login: String!
  password: String!
}

input UserInsertInput {
  login: String!
  password: String!
  person: PersonInsertInput!
}

input PersonInsertInput {
  name: String!
  lastName: String!
  email: String!
  cpf: String!
  birthdate: DateTime!
  gender: Gender!
  phones: [PhoneInsertInput!]!
  condominiums: [CondominiumInsertInput!]!
}

input PhoneInsertInput {
  ddd: String!
  number: String!
}

input CondominiumInsertInput {
  companyName: String!
  cnpj: String!
  character: String = "#"
  address: AddressInsertInput!
  rules: [RuleInsertInput!]
}

input AddressInsertInput {
  zip: String!
  address: String!
  number: String!
  city: ID!
}

input RuleInsertInput {
  id: String
  description: String!
}

input ForgotInput {
  login: String!
  callback: String!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CondominiumUpdateInput {
  companyName: String
  cnpj: String
  character: String = "#"
  address: AddressInsertInput
  rules: [RuleInsertInput!]
}

input BlockInsertInput {
  name: String!
  number: Int!
  images: [Upload!]
  condominium: ID
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input BlockUpdateInput {
  name: String
  number: Int
  images: [Upload!]
  condominium: ID
}
